// Generated by gencpp from file IRIS24/PC2BS.msg
// DO NOT EDIT!


#ifndef IRIS24_MESSAGE_PC2BS_H
#define IRIS24_MESSAGE_PC2BS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace IRIS24
{
template <class ContainerAllocator>
struct PC2BS_
{
  typedef PC2BS_<ContainerAllocator> Type;

  PC2BS_()
    : pos_x(0)
    , pos_y(0)
    , pos_theta(0)
    , v_x(0)
    , v_y(0)
    , v_theta(0)
    , bola_x(0)
    , bola_y(0)  {
    }
  PC2BS_(const ContainerAllocator& _alloc)
    : pos_x(0)
    , pos_y(0)
    , pos_theta(0)
    , v_x(0)
    , v_y(0)
    , v_theta(0)
    , bola_x(0)
    , bola_y(0)  {
  (void)_alloc;
    }



   typedef int16_t _pos_x_type;
  _pos_x_type pos_x;

   typedef int16_t _pos_y_type;
  _pos_y_type pos_y;

   typedef int16_t _pos_theta_type;
  _pos_theta_type pos_theta;

   typedef int16_t _v_x_type;
  _v_x_type v_x;

   typedef int16_t _v_y_type;
  _v_y_type v_y;

   typedef int16_t _v_theta_type;
  _v_theta_type v_theta;

   typedef int16_t _bola_x_type;
  _bola_x_type bola_x;

   typedef int16_t _bola_y_type;
  _bola_y_type bola_y;





  typedef boost::shared_ptr< ::IRIS24::PC2BS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::IRIS24::PC2BS_<ContainerAllocator> const> ConstPtr;

}; // struct PC2BS_

typedef ::IRIS24::PC2BS_<std::allocator<void> > PC2BS;

typedef boost::shared_ptr< ::IRIS24::PC2BS > PC2BSPtr;
typedef boost::shared_ptr< ::IRIS24::PC2BS const> PC2BSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::IRIS24::PC2BS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::IRIS24::PC2BS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::IRIS24::PC2BS_<ContainerAllocator1> & lhs, const ::IRIS24::PC2BS_<ContainerAllocator2> & rhs)
{
  return lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_theta == rhs.pos_theta &&
    lhs.v_x == rhs.v_x &&
    lhs.v_y == rhs.v_y &&
    lhs.v_theta == rhs.v_theta &&
    lhs.bola_x == rhs.bola_x &&
    lhs.bola_y == rhs.bola_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::IRIS24::PC2BS_<ContainerAllocator1> & lhs, const ::IRIS24::PC2BS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace IRIS24

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::IRIS24::PC2BS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::IRIS24::PC2BS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::IRIS24::PC2BS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::IRIS24::PC2BS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IRIS24::PC2BS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IRIS24::PC2BS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::IRIS24::PC2BS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a53a747ba62c0bdacb7a65cdfc72b39";
  }

  static const char* value(const ::IRIS24::PC2BS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a53a747ba62c0bdULL;
  static const uint64_t static_value2 = 0xacb7a65cdfc72b39ULL;
};

template<class ContainerAllocator>
struct DataType< ::IRIS24::PC2BS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IRIS24/PC2BS";
  }

  static const char* value(const ::IRIS24::PC2BS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::IRIS24::PC2BS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 pos_x\n"
"int16 pos_y\n"
"int16 pos_theta\n"
"int16 v_x\n"
"int16 v_y\n"
"int16 v_theta\n"
"int16 bola_x\n"
"int16 bola_y\n"
;
  }

  static const char* value(const ::IRIS24::PC2BS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::IRIS24::PC2BS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_theta);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.v_theta);
      stream.next(m.bola_x);
      stream.next(m.bola_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PC2BS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::IRIS24::PC2BS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::IRIS24::PC2BS_<ContainerAllocator>& v)
  {
    s << indent << "pos_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_theta: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos_theta);
    s << indent << "v_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.v_y);
    s << indent << "v_theta: ";
    Printer<int16_t>::stream(s, indent + "  ", v.v_theta);
    s << indent << "bola_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bola_x);
    s << indent << "bola_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bola_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRIS24_MESSAGE_PC2BS_H
