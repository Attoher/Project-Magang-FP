// Generated by gencpp from file IRIS24/TT.msg
// DO NOT EDIT!


#ifndef IRIS24_MESSAGE_TT_H
#define IRIS24_MESSAGE_TT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace IRIS24
{
template <class ContainerAllocator>
struct TT_
{
  typedef TT_<ContainerAllocator> Type;

  TT_()
    : pindahbola_x(0)
    , pindahbola_y(0)  {
    }
  TT_(const ContainerAllocator& _alloc)
    : pindahbola_x(0)
    , pindahbola_y(0)  {
  (void)_alloc;
    }



   typedef int16_t _pindahbola_x_type;
  _pindahbola_x_type pindahbola_x;

   typedef int16_t _pindahbola_y_type;
  _pindahbola_y_type pindahbola_y;





  typedef boost::shared_ptr< ::IRIS24::TT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::IRIS24::TT_<ContainerAllocator> const> ConstPtr;

}; // struct TT_

typedef ::IRIS24::TT_<std::allocator<void> > TT;

typedef boost::shared_ptr< ::IRIS24::TT > TTPtr;
typedef boost::shared_ptr< ::IRIS24::TT const> TTConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::IRIS24::TT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::IRIS24::TT_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::IRIS24::TT_<ContainerAllocator1> & lhs, const ::IRIS24::TT_<ContainerAllocator2> & rhs)
{
  return lhs.pindahbola_x == rhs.pindahbola_x &&
    lhs.pindahbola_y == rhs.pindahbola_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::IRIS24::TT_<ContainerAllocator1> & lhs, const ::IRIS24::TT_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace IRIS24

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::IRIS24::TT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::IRIS24::TT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::IRIS24::TT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::IRIS24::TT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IRIS24::TT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IRIS24::TT_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::IRIS24::TT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42509896b73070f28322acd500e78fe5";
  }

  static const char* value(const ::IRIS24::TT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42509896b73070f2ULL;
  static const uint64_t static_value2 = 0x8322acd500e78fe5ULL;
};

template<class ContainerAllocator>
struct DataType< ::IRIS24::TT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IRIS24/TT";
  }

  static const char* value(const ::IRIS24::TT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::IRIS24::TT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 pindahbola_x\n"
"int16 pindahbola_y\n"
;
  }

  static const char* value(const ::IRIS24::TT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::IRIS24::TT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pindahbola_x);
      stream.next(m.pindahbola_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::IRIS24::TT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::IRIS24::TT_<ContainerAllocator>& v)
  {
    s << indent << "pindahbola_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pindahbola_x);
    s << indent << "pindahbola_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pindahbola_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRIS24_MESSAGE_TT_H
